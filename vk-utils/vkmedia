#!/usr/bin/env python3
import argparse
from html import unescape as html_unescape
import vk

def unesc_and_esc(s):
    return html_unescape(s.replace('<br>', '\n')).replace('\\', '\\\\').replace('\r', '\\r').replace('\n', '\\n')

def search_audio(session, args):
    r = session.request(
        'audio.search',
        v='5.2',
        q=args.query,
        auto_complete=int(args.correct),
        lyrics=int(args.with_lyrics_only),
        performer_only=int(args.artist),
        sort=dict(date=0, duration=1, popularity=2)[args.sort],
        offset=args.offset,
        count=args.number)

    for t in r['items']:
        t['title'] = unesc_and_esc(t['title'])
        t['artist'] = unesc_and_esc(t['artist'])
        if 'lyrics_id' not in t:
            t['lyrics_id'] = -1
        if 'album_id' not in t:
            t['album_id'] = -1
        print(args.format.format(**t))

def search_video(session, args):
    def parse_time(s):
        parts = s.split(':')
        seconds = int(parts[-1])
        if len(parts) > 1:
            seconds += 60 * int(parts[-2])
        if len(parts) > 2:
            seconds += 60 * 60 * int(parts[-3])
        if len(parts) > 3:
            raise ValueError('invalid time format: ' + s)
        if seconds <= 0:
            raise ValueError('non-positive number of seconds: ' + s)
        return seconds

    filters = []
    duration_kwargs = {}
    if args.hosting == 'youtube':
        filters.append('youtube')
    elif args.hosting == 'vimeo':
        filters.append('vimeo')
    if args.mp4_only:
        filters.append('mp4')
    if args.duration:
        if args.duration == 'short':
            filters.append('short')
        elif args.duration == 'long':
            filters.append('long')
        elif args.duration.endswith('-'):
            duration_kwargs['shorter'] = parse_time(args.duration[:-1])
        elif args.duration.endswith('+'):
            duration_kwargs['longer'] = parse_time(args.duration[:-1])
        else:
            bounds = args.duration.split('-')
            if len(bounds) != 2:
                raise ValueError('invalid time interval: ' + args.duration)
            duration_kwargs['shorter'] = parse_time(bounds[0])
            duration_kwargs['longer'] = parse_time(bounds[1])

    r = session.request(
        'video.search',
        v='5.2',
        q=args.query,
        sort=dict(date=0, duration=1, relevance=2)[args.sort],
        hd=int(args.hd_only),
        adult=int(not args.no_adult),
        filters=','.join(filters),
        offset=args.offset,
        count=args.number,
        **duration_kwargs)

    for t in r['items']:
        t['title'] = unesc_and_esc(t['title'])
        t['description'] = unesc_and_esc(t['description'])
        print(args.format.format(**t))

def print_lyrics(session, args):
    r = session.request('audio.getLyrics', v='5.2', lyrics_id=args.lyrics_id)
    print(html_unescape(r['text']))

def main():
    p = argparse.ArgumentParser()
    sp = p.add_subparsers(title='subcommands', dest='command')
    sp.required = True
    p.add_argument('-T', '--access-token', help='access token')

    ap = sp.add_parser('audio')
    ap.set_defaults(func=search_audio)
    ap.add_argument('-f', '--format', help='output format', default='# {artist} — {title}\n{url}')
    ap.add_argument('-c', '--correct', help='correct for mistakes in the search query', action='store_true')
    ap.add_argument('-l', '--with-lyrics-only', help='search only audio files that have associated lyrics', action='store_true')
    ap.add_argument('-a', '--artist', help='search only by artist name', action='store_true')
    ap.add_argument('-s', '--sort', help='sort by', choices=['duration', 'popularity', 'date'], default='popularity')
    ap.add_argument('-o', '--offset', help='offset', type=int, default=0)
    ap.add_argument('-n', '--number', help='number of audio files to query', type=int, default=100)
    ap.add_argument('query')

    vp = sp.add_parser('video')
    vp.set_defaults(func=search_video)
    vp.add_argument('-f', '--format', help='output format', default='# {title} — {description}\n{player}')
    vp.add_argument('-s', '--sort', help='sort by...', choices=['duration', 'relevance', 'date'], default='relevance')
    vp.add_argument('-H', '--hd-only', help='search for HD videos only', action='store_true')
    vp.add_argument('-A', '--no-adult', help='do not include adult content', action='store_true')
    vp.add_argument('-O', '--hosting', help='search only for videos stored on this hosting', choices=['youtube', 'vimeo'], default=None)
    vp.add_argument('-m', '--mp4-only', help='search for mp4 videos only', action='store_true')
    vp.add_argument('-o', '--offset', help='offset', type=int, default=0)
    vp.add_argument('-n', '--number', help='number of video files to query', type=int, default=100)
    vp.add_argument('-d', '--duration', metavar='{short,long,<time>+,<time>-,<time>-<time>}', help='''search only for videos with duration:
"short": considered "short" by vk.com;
"long": considered "long" by vk.com;
<time>+: longer than <time>;
<time>-: shorter than <time>;
<time>-<time>: longer than the first <time> but shorter than the second one.
<time> format: [[<hours>:]<minutes>:]<seconds>.''')
    vp.add_argument('query')

    lp = sp.add_parser('get_lyrics')
    lp.set_defaults(func=print_lyrics)
    lp.add_argument('lyrics_id')

    a = p.parse_args()
    session = vk.Session(defparams=dict(access_token=a.access_token))
    a.func(session, a)

if __name__ == '__main__':
    main()
